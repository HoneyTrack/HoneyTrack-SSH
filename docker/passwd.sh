#!/bin/bash

echo "


██████╗  █████╗ ███████╗███████╗██╗    ██╗██████╗      ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██████╗ 
██╔══██╗██╔══██╗██╔════╝██╔════╝██║    ██║██╔══██╗    ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██╔══██╗
██████╔╝███████║███████╗███████╗██║ █╗ ██║██║  ██║    ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██████╔╝
██╔═══╝ ██╔══██║╚════██║╚════██║██║███╗██║██║  ██║    ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██╔══██╗
██║     ██║  ██║███████║███████║╚███╔███╔╝██████╔╝    ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗██║  ██║
╚═╝     ╚═╝  ╚═╝╚══════╝╚══════╝ ╚══╝╚══╝ ╚═════╝      ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝
                                                                                            

Made by- @aatharvauti
https://github.com/aatharvauti

"

# Define Global Variables

CHARACTERS=16

PASS_CONFIG_IN=$(echo "
The current configuration will generate a password of:
$CHARACTERS characters...
")

# Specify the user and change the password
CHANGE_PASS () {
    echo "USERNAME: "
    read USERNAME
    passwd $USERNAME
}

# Set the strength of Password (no. of Characters)
PASS_CONFIG () {
    
    echo "$PASS_CONFIG_IN"
    echo "Do you want to change this configuration? [y/n]"

    read CONFIG_CHOICE 

    case "$CONFIG_CHOICE" in
        ([yY])
            echo "Enter the number of characters to use: "
            read CHARACTERS
            echo "$PASS_CONFIG_IN"
        ;;
        *)
            echo "Returning back to menu"
        ;;
    esac

}

# Generating a TXT file which lists all users except root
NO_ROOT_TXT () {
    touch tmp.txt
    awk -F: '{print $1}' /etc/passwd > tmp.txt # Lists users from /etc/passwd file
    awk 'NR>1' tmp.txt > tmp2.txt && mv tmp2.txt tmp.txt # Remove root (1st Line of the File)
}

# Generate a random password and store it in $PASS
GENERATE_PASS () {
    PASS=$(< /dev/urandom tr -dc 'A-Z-a-z-0-9-_!@$%^&?' | head -c${1:-$CHARACTERS};echo;)
}

# Read the ./tmp.txt file and set a random password for each user present
SET_PASS_RANDOM () {
    NO_ROOT_TXT
    FILE="tmp.txt"
    LINES=$(cat $FILE) # cat the file generated by NO_ROOT_TXT
    PASS=""
    for LINE in $LINES # for each line, there is an user
    do
        USER=$(echo "$LINE") 
        GENERATE_PASS
        echo "$USER:$PASS" >> tmp.txt
    done
    
    cat tmp.txt
    # chpasswd < tmp.txt 2>/dev/null
    rm tmp.txt

    echo "DONE!"
}

# Read the ./tmp.txt file and set password as "x" for each user present
SET_PASS_X () {
    NO_ROOT_TXT
    FILE="tmp.txt"
    LINES=$(cat $FILE)
    PASS="x" # Repeat SET_PASS_RANDOM except don't generate a new password and set it to ""
    for LINE in $LINES
    do
        USER=$(echo "$LINE")
        echo "$USER:$PASS" >> tmp.txt
    done

    cat tmp.txt
    # chpasswd < tmp.txt 2>/dev/null  
    rm tmp.txt

    echo "DONE!"
}


RANDOM_PASS () {
    
    echo "
WARNING: This will set a RANDOM password for each user account on this machine (except root)!

$PASS_CONFIG_IN

Do you want to continue? [y/n]
    "

    read RP_CHOICE

    case "$RP_CHOICE" in
        ([yY])
            echo "Setting Random Passwords for all user accounts now...."
            SET_PASS_RANDOM
        ;;
        *)
            echo "Returning back to menu"
        ;;
    esac
}

X_PASS () {
    
    echo "
WARNING: This will REMOVE the password for each user account on this machine (except root)!

$PASS_CONFIG_IN

Do you want to continue? [y/n]
    "

    read NL_CHOICE

    case "$NL_CHOICE" in
        ([yY])
            echo "Removing Passwords for all user accounts now...."
            SET_PASS_X
        ;;
        *)
            echo "Returning back to menu"
        ;;
    esac
}

while
    echo "

MAIN MENU 

1. LIST ALL THE USERS
2. CHANGE PASSWORD OF A GIVEN USER
3. RANDOM PASSWORD GENERATOR CONFIGURATION
4. SET RANDOM PASSWORDS FOR ALL USERS (EXCEPT ROOT)
5. SET PASSWORD AS "x" FOR ALL USERS
6. EXIT 

    "
    echo "Select an Option: " 
    read CHOICE 

    [ $CHOICE -gt 0 ] && [ $CHOICE -lt 7 ]
        if [ $CHOICE -eq 1 ]; then
            awk -F: '{print $1}' /etc/passwd
        elif [ $CHOICE -eq 2 ]; then
            CHANGE_PASS
        elif [ $CHOICE -eq 3 ]; then
            PASS_CONFIG
        elif [ $CHOICE -eq 4 ]; then
            RANDOM_PASS
        elif [ $CHOICE -eq 5 ]; then
            X_PASS
        elif [ $CHOICE -eq 6 ]; then
            echo "EXITING THE PROGRAM"
            exit 0
        fi
    do true; 
done

